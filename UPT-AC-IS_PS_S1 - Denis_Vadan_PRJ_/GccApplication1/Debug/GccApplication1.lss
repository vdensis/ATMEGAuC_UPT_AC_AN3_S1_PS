
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000740  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800110  00800110  000007e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001238  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc2  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de6  00000000  00000000  000027be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000035a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a2  00000000  00000000  000038cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e0  00000000  00000000  0000406e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000454e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_7>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	8f 00       	.word	0x008f	; ????
  6a:	9a 00       	.word	0x009a	; ????
  6c:	a9 00       	.word	0x00a9	; ????
  6e:	b7 00       	.word	0x00b7	; ????
  70:	c5 00       	.word	0x00c5	; ????
  72:	d2 00       	.word	0x00d2	; ????
  74:	e0 00       	.word	0x00e0	; ????
  76:	ec 00       	.word	0x00ec	; ????
  78:	fa 00       	.word	0x00fa	; ????
  7a:	05 01       	movw	r0, r10
  7c:	02 02       	muls	r16, r18
  7e:	08 02       	muls	r16, r24
  80:	12 02       	muls	r17, r18
  82:	1b 02       	muls	r17, r27
  84:	24 02       	muls	r18, r20
  86:	2c 02       	muls	r18, r28
  88:	35 02       	muls	r19, r21
  8a:	3c 02       	muls	r19, r28
  8c:	45 02       	muls	r20, r21
  8e:	4b 02       	muls	r20, r27

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d8 e0       	ldi	r29, 0x08	; 8
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	11 e0       	ldi	r17, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	e0 e4       	ldi	r30, 0x40	; 64
  a4:	f7 e0       	ldi	r31, 0x07	; 7
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  c6:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <EEPROM_write>:
**F*****************************************************************************************/

_EXT void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  ce:	f9 99       	sbic	0x1f, 1	; 31
  d0:	fe cf       	rjmp	.-4      	; 0xce <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
  d2:	92 bd       	out	0x22, r25	; 34
  d4:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
  d6:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
  d8:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
  da:	f9 9a       	sbi	0x1f, 1	; 31
  dc:	08 95       	ret

000000de <EEPROM_read>:
**F*****************************************************************************************/

_EXT unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  de:	f9 99       	sbic	0x1f, 1	; 31
  e0:	fe cf       	rjmp	.-4      	; 0xde <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
  e2:	92 bd       	out	0x22, r25	; 34
  e4:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  e6:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
  e8:	80 b5       	in	r24, 0x20	; 32
}
  ea:	08 95       	ret

000000ec <ShowAndIncrement_7SegmentDisplay>:
**
**F*****************************************************************************************/

_EXT void ShowAndIncrement_7SegmentDisplay(void)
{
	if(EEPROM_read(0x04) > 9)	//if memory is corrupted
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 6f 00 	call	0xde	; 0xde <EEPROM_read>
  f4:	8a 30       	cpi	r24, 0x0A	; 10
  f6:	28 f0       	brcs	.+10     	; 0x102 <ShowAndIncrement_7SegmentDisplay+0x16>
	{
		EEPROM_write(0x04,0);	//reset the counter
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
	}
	
	switch(EEPROM_read(0x04))
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 6f 00 	call	0xde	; 0xde <EEPROM_read>
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	91 05       	cpc	r25, r1
 110:	08 f0       	brcs	.+2      	; 0x114 <ShowAndIncrement_7SegmentDisplay+0x28>
 112:	87 c0       	rjmp	.+270    	; 0x222 <ShowAndIncrement_7SegmentDisplay+0x136>
 114:	fc 01       	movw	r30, r24
 116:	ec 5c       	subi	r30, 0xCC	; 204
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__tablejump2__>
	{
		
		case 0:
		{
			PORTD |= (SET(3) | SET(4) | SET(5) | SET(6) | SET(7));
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	88 6f       	ori	r24, 0xF8	; 248
 122:	8b b9       	out	0x0b, r24	; 11
			PORTB |= SET(5);
 124:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= 0xFE;	//reset bit 0 from PORTB
 126:	28 98       	cbi	0x05, 0	; 5
			EEPROM_write(0x04,0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 132:	08 95       	ret
		
		case 1:
		{
			PORTD |= (SET(3) | SET(4));
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	88 61       	ori	r24, 0x18	; 24
 138:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x1F;	//clear f,e,d led
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 71       	andi	r24, 0x1F	; 31
 13e:	8b b9       	out	0x0b, r24	; 11
			PORTB &= 0xDE;	//reset bit 0 and 5 from PORTB
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8e 7d       	andi	r24, 0xDE	; 222
 144:	85 b9       	out	0x05, r24	; 5
			EEPROM_write(0x04,1);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 150:	08 95       	ret
		
		case 2:
		{
			PORTD = ( SET(3) | SET(5) | SET(6));
 152:	88 e6       	ldi	r24, 0x68	; 104
 154:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x6F;	//clear f,c led
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	8f 76       	andi	r24, 0x6F	; 111
 15a:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (SET(5) | SET(0));	//set bit 0 and 5 from PORTB
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	81 62       	ori	r24, 0x21	; 33
 160:	85 b9       	out	0x05, r24	; 5
			EEPROM_write(0x04,2);
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 16c:	08 95       	ret
		
		case 3:
		{
			PORTD = ( SET(3) | SET(4) | SET(5));
 16e:	88 e3       	ldi	r24, 0x38	; 56
 170:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x3F;	//clear f,e
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	8f 73       	andi	r24, 0x3F	; 63
 176:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (SET(0) | SET(5));
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	81 62       	ori	r24, 0x21	; 33
 17c:	85 b9       	out	0x05, r24	; 5
			EEPROM_write(0x04,3);
 17e:	63 e0       	ldi	r22, 0x03	; 3
 180:	84 e0       	ldi	r24, 0x04	; 4
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 188:	08 95       	ret
		
		case 4:
		{
			PORTD = ( SET(3) | SET(4) | SET(7));
 18a:	88 e9       	ldi	r24, 0x98	; 152
 18c:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x9F;	//clear e,d
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	8f 79       	andi	r24, 0x9F	; 159
 192:	8b b9       	out	0x0b, r24	; 11
			PORTB |= 0x01;
 194:	28 9a       	sbi	0x05, 0	; 5
			PORTB &= 0xDF;	//clear a
 196:	2d 98       	cbi	0x05, 5	; 5
			
			EEPROM_write(0x04,4);
 198:	64 e0       	ldi	r22, 0x04	; 4
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 1a2:	08 95       	ret
		
		case 5:
		{
			PORTD = ( SET(4) | SET(5) | SET(7));
 1a4:	80 eb       	ldi	r24, 0xB0	; 176
 1a6:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0xB7;	//clear b,e
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	87 7b       	andi	r24, 0xB7	; 183
 1ac:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (SET(0) | SET(5));
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	81 62       	ori	r24, 0x21	; 33
 1b2:	85 b9       	out	0x05, r24	; 5
			EEPROM_write(0x04,5);
 1b4:	65 e0       	ldi	r22, 0x05	; 5
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 1be:	08 95       	ret
		
		case 6:
		{
			PORTD = ( SET(4) | SET(5) | SET(6) | SET(7));
 1c0:	80 ef       	ldi	r24, 0xF0	; 240
 1c2:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0xF7;	//clear b
 1c4:	5b 98       	cbi	0x0b, 3	; 11
			PORTB |= (SET(0) | SET(5));
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	81 62       	ori	r24, 0x21	; 33
 1ca:	85 b9       	out	0x05, r24	; 5
			EEPROM_write(0x04,6);
 1cc:	66 e0       	ldi	r22, 0x06	; 6
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 1d6:	08 95       	ret
		
		case 7:
		{
			PORTD |= ( SET(3) | SET(4));
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	88 61       	ori	r24, 0x18	; 24
 1dc:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x1F;		//Clear d,e,f
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	8f 71       	andi	r24, 0x1F	; 31
 1e2:	8b b9       	out	0x0b, r24	; 11
			PORTB |= SET(5);	//Set a
 1e4:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= 0xFE;		//Clear a
 1e6:	28 98       	cbi	0x05, 0	; 5
			EEPROM_write(0x04,7);
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 1f2:	08 95       	ret
		
		case 8:
		{
			PORTD = ( SET(4) | SET(5) | SET(6) | SET(7) | SET(3));
 1f4:	88 ef       	ldi	r24, 0xF8	; 248
 1f6:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (SET(0) | SET(5));
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	81 62       	ori	r24, 0x21	; 33
 1fc:	85 b9       	out	0x05, r24	; 5
			EEPROM_write(0x04,8);
 1fe:	68 e0       	ldi	r22, 0x08	; 8
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
		}break;
 208:	08 95       	ret
		
		case 9:
		{
			PORTD |= ( SET(3) | SET(4) | SET(5) | SET(7) ) ;
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	88 6b       	ori	r24, 0xB8	; 184
 20e:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0xBF;		//clear e
 210:	5e 98       	cbi	0x0b, 6	; 11
			PORTB |= (SET(5) | SET(0));
 212:	85 b1       	in	r24, 0x05	; 5
 214:	81 62       	ori	r24, 0x21	; 33
 216:	85 b9       	out	0x05, r24	; 5
			EEPROM_write(0x04,9);
 218:	69 e0       	ldi	r22, 0x09	; 9
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
 222:	08 95       	ret

00000224 <SevenSegments_display_init>:
**F*****************************************************************************************/

_EXT void SevenSegments_display_init(void)
{
	//Set Output Pins[2-7 from PORTD, and 0,5 from PORTB] for display led
	DDRD |= (SET(3) | SET(4) | SET(5) | SET(6) | SET(7));
 224:	8a b1       	in	r24, 0x0a	; 10
 226:	88 6f       	ori	r24, 0xF8	; 248
 228:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (SET(5) | SET(0));
 22a:	84 b1       	in	r24, 0x04	; 4
 22c:	81 62       	ori	r24, 0x21	; 33
 22e:	84 b9       	out	0x04, r24	; 4

	//Show the number from start
	ShowAndIncrement_7SegmentDisplay();
 230:	0e 94 76 00 	call	0xec	; 0xec <ShowAndIncrement_7SegmentDisplay>
 234:	08 95       	ret

00000236 <ADC_temp_init>:
**F*****************************************************************************************/

_EXT void ADC_temp_init(void)
{
	//set PORTB[4] as output (RED LED) - PIN 12
	DDRB |= SET(4);
 236:	24 9a       	sbi	0x04, 4	; 4

	//SET 128 prescaler
	//ADC reference clock = 125Khz and start ADC (ADEN = 1)
	ADCSRA |= ( SET(ADPS2) | SET(ADPS1) | SET(ADPS0) | SET(ADEN));
 238:	ea e7       	ldi	r30, 0x7A	; 122
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	87 68       	ori	r24, 0x87	; 135
 240:	80 83       	st	Z, r24

	//Set Reference to 5V (VCC)
	ADMUX |= SET(REFS0);
 242:	ac e7       	ldi	r26, 0x7C	; 124
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	8c 91       	ld	r24, X
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	8c 93       	st	X, r24
	
	ADCSRA |= SET(ADSC);			//Start conversion	
 24c:	80 81       	ld	r24, Z
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <ADC_temp_Read>:
**
**F*****************************************************************************************/

_EXT unsigned short int ADC_temp_Read(unsigned char Pin)
{
	ADMUX |= Pin;					//Set ADC Pin to be read
 254:	ec e7       	ldi	r30, 0x7C	; 124
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	89 2b       	or	r24, r25
 25c:	80 83       	st	Z, r24
	ADCSRA |= SET(ADSC);			//Start conversion
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 64       	ori	r24, 0x40	; 64
 266:	80 83       	st	Z, r24

	while(ADCSRA & SET(ADSC));		//Wait until the conversion is done
 268:	80 81       	ld	r24, Z
 26a:	86 fd       	sbrc	r24, 6
 26c:	fd cf       	rjmp	.-6      	; 0x268 <ADC_temp_Read+0x14>
	ADCSRA |= SET(ADIF);			//conversion complete (Clear ADIF by writing one to it)
 26e:	ea e7       	ldi	r30, 0x7A	; 122
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 61       	ori	r24, 0x10	; 16
 276:	80 83       	st	Z, r24

	return ADCW;					//return the ADC(Word)
 278:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 27c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 280:	08 95       	ret

00000282 <ADC_temp_CovertToCelsius>:
**
**F*****************************************************************************************/

_EXT unsigned char ADC_temp_CovertToCelsius(unsigned short int adc_read)
{
	return ((5 * adc_read * 100) / 1024);
 282:	24 ef       	ldi	r18, 0xF4	; 244
 284:	31 e0       	ldi	r19, 0x01	; 1
 286:	ac 01       	movw	r20, r24
 288:	42 9f       	mul	r20, r18
 28a:	c0 01       	movw	r24, r0
 28c:	43 9f       	mul	r20, r19
 28e:	90 0d       	add	r25, r0
 290:	52 9f       	mul	r21, r18
 292:	90 0d       	add	r25, r0
 294:	11 24       	eor	r1, r1
}
 296:	89 2f       	mov	r24, r25
 298:	86 95       	lsr	r24
 29a:	86 95       	lsr	r24
 29c:	08 95       	ret

0000029e <ADC_temp_LED_ON_OFF>:
**
**F*****************************************************************************************/

_EXT void ADC_temp_LED_ON_OFF(unsigned char lu8_temp)
{
	if(lu8_temp <= (TEMP_SET - 1))
 29e:	83 32       	cpi	r24, 0x23	; 35
 2a0:	10 f4       	brcc	.+4      	; 0x2a6 <ADC_temp_LED_ON_OFF+0x8>
	{
		PORTB &= 0xEF;		//LED OFF
 2a2:	2c 98       	cbi	0x05, 4	; 5
 2a4:	08 95       	ret
	}
	else
	{
		if(lu8_temp >= (TEMP_SET + 1))
 2a6:	84 32       	cpi	r24, 0x24	; 36
 2a8:	08 f0       	brcs	.+2      	; 0x2ac <ADC_temp_LED_ON_OFF+0xe>
		{
			PORTB |= SET(4);	//LED ON
 2aa:	2c 9a       	sbi	0x05, 4	; 5
 2ac:	08 95       	ret

000002ae <button_init>:
#include "../GeneralDefines.h"

_EXT void button_init(void)
{

	    DDRD &= ~SET(2);						// Clear the PD2 pin
 2ae:	8a b1       	in	r24, 0x0a	; 10
 2b0:	88 7f       	andi	r24, 0xF8	; 248
 2b2:	8a b9       	out	0x0a, r24	; 10
	    // PD2 (PCINT0 pin) is now an input

	   // PORTD |= SET(PORTD2);					// turn On the Pull-up
	    // PD2 is now an input with pull-up enabled

	    EICRA |= ( SET(ISC01) | SET(ISC00));    // set INT0 to trigger on the falling edge of INT0
 2b4:	e9 e6       	ldi	r30, 0x69	; 105
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	83 60       	ori	r24, 0x03	; 3
 2bc:	80 83       	st	Z, r24
	    EIMSK |= SET(INT0);						// Turns on INT0
 2be:	e8 9a       	sbi	0x1d, 0	; 29
 2c0:	08 95       	ret

000002c2 <temperature_function>:
**
**
**F*****************************************************************************************/

void temperature_function(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <temperature_function+0x6>
 2c8:	1f 92       	push	r1
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
	char lu8_buff_transmit[3];

	ru16_analog_temp = ADC_temp_Read(0);
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 2a 01 	call	0x254	; 0x254 <ADC_temp_Read>
 2d4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <ru16_analog_temp+0x1>
 2d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <ru16_analog_temp>
	ru8_celsius_temp = ADC_temp_CovertToCelsius(ru16_analog_temp);
 2dc:	0e 94 41 01 	call	0x282	; 0x282 <ADC_temp_CovertToCelsius>
 2e0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ru8_celsius_temp>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2e4:	4a e0       	ldi	r20, 0x0A	; 10
 2e6:	be 01       	movw	r22, r28
 2e8:	6f 5f       	subi	r22, 0xFF	; 255
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__itoa_ncheck>

	itoa(ru8_celsius_temp,lu8_buff_transmit,10);
	Serial_transmission_UsartWrite("\nTemperatura: ",14);
 2f2:	6e e0       	ldi	r22, 0x0E	; 14
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 17 03 	call	0x62e	; 0x62e <Serial_transmission_UsartWrite>
	Serial_transmission_UsartWrite(lu8_buff_transmit, 3);
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	ce 01       	movw	r24, r28
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	0e 94 17 03 	call	0x62e	; 0x62e <Serial_transmission_UsartWrite>
	
	ADC_temp_LED_ON_OFF(ru8_celsius_temp);
 306:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ru8_celsius_temp>
 30a:	0e 94 4f 01 	call	0x29e	; 0x29e <ADC_temp_LED_ON_OFF>
}
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <Reset_ButtonCounter_3sec>:
**
**F*****************************************************************************************/

void Reset_ButtonCounter_3sec(void)
{
		if (ct_button >= 3 && ((PIND & SET(PD2))))
 31a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <ct_button>
 31e:	83 30       	cpi	r24, 0x03	; 3
 320:	60 f0       	brcs	.+24     	; 0x33a <Reset_ButtonCounter_3sec+0x20>
 322:	4a 9b       	sbis	0x09, 2	; 9
 324:	0a c0       	rjmp	.+20     	; 0x33a <Reset_ButtonCounter_3sec+0x20>
		{
			//Write 0 on 7Segments display
			PORTD |= (SET(3) | SET(4) | SET(5) | SET(6) | SET(7));
 326:	8b b1       	in	r24, 0x0b	; 11
 328:	88 6f       	ori	r24, 0xF8	; 248
 32a:	8b b9       	out	0x0b, r24	; 11
			PORTB |= SET(5);
 32c:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= 0xFE;	//reset bit 0 from PORTB
 32e:	28 98       	cbi	0x05, 0	; 5
			
			//write 0 on EEPROM
			EEPROM_write(0x04,0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
 33a:	08 95       	ret

0000033c <SETUP>:
**F*****************************************************************************************/

void SETUP(void)
{
	//init the timer 2 for LED blinking every 1 second
	Timer2_Blink_1s_Timer_init();
 33c:	0e 94 4e 03 	call	0x69c	; 0x69c <Timer2_Blink_1s_Timer_init>
	
	
	Timer0_fPWM_dimming_init();
 340:	0e 94 49 03 	call	0x692	; 0x692 <Timer0_fPWM_dimming_init>
	
	//Init the 7 segments display
	SevenSegments_display_init();
 344:	0e 94 12 01 	call	0x224	; 0x224 <SevenSegments_display_init>

	//Init the serial communication
	Serial_transmission_init();
 348:	0e 94 06 03 	call	0x60c	; 0x60c <Serial_transmission_init>
	
	//Init ADC
	ADC_temp_init();
 34c:	0e 94 1b 01 	call	0x236	; 0x236 <ADC_temp_init>

	//init the button
	button_init();
 350:	0e 94 57 01 	call	0x2ae	; 0x2ae <button_init>
 354:	08 95       	ret

00000356 <main>:
**F*****************************************************************************************/

int main()
{
	//initialize all modules
	SETUP();
 356:	0e 94 9e 01 	call	0x33c	; 0x33c <SETUP>

	while (1)
	{
		//read and transmit temperature
		temperature_function();
 35a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <temperature_function>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	83 ed       	ldi	r24, 0xD3	; 211
 362:	90 e3       	ldi	r25, 0x30	; 48
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <main+0xe>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x18>
 36e:	00 00       	nop
 370:	f4 cf       	rjmp	.-24     	; 0x35a <main+0x4>

00000372 <__vector_18>:
	}
}

//ISR for USART Rx
ISR(USART_RX_vect)
{
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	8f 93       	push	r24
	unsigned char ub_read;
	ub_read = UDR0;
 37e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	switch(ub_read)
 382:	81 36       	cpi	r24, 0x61	; 97
 384:	19 f0       	breq	.+6      	; 0x38c <__vector_18+0x1a>
 386:	83 37       	cpi	r24, 0x73	; 115
 388:	19 f0       	breq	.+6      	; 0x390 <__vector_18+0x1e>
 38a:	03 c0       	rjmp	.+6      	; 0x392 <__vector_18+0x20>
	{
		case 'a':
		{
			//turn on white LED
			//set Pin 11 [PORTB_3]
			PORTB |= SET(3);
 38c:	2b 9a       	sbi	0x05, 3	; 5
		}break;
 38e:	01 c0       	rjmp	.+2      	; 0x392 <__vector_18+0x20>
		case 's':
		{
			//turn of white LED
			//reset Pin 11 [PORTB_3]
			PORTB &= 0xF7;
 390:	2b 98       	cbi	0x05, 3	; 5
		}break;
	}
}
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_1>:


//ISR for short button push
ISR(INT0_vect)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
	SevenSengemntCT = EEPROM_read(0x04);
 3c0:	84 e0       	ldi	r24, 0x04	; 4
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 6f 00 	call	0xde	; 0xde <EEPROM_read>
	if(SevenSengemntCT < 9)
 3c8:	89 30       	cpi	r24, 0x09	; 9
 3ca:	20 f4       	brcc	.+8      	; 0x3d4 <__vector_1+0x36>
	{
		SevenSengemntCT++;
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__vector_1+0x3a>
		
	}
	else
	{
		SevenSengemntCT = 0;
 3d4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	
	EEPROM_write(0x04,SevenSengemntCT);
 3d8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_write>
	
	ct_button = 0;						//reset the counter
 3e4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <ct_button>

	switch(EEPROM_read(0x04))
 3e8:	84 e0       	ldi	r24, 0x04	; 4
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 6f 00 	call	0xde	; 0xde <EEPROM_read>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	8a 30       	cpi	r24, 0x0A	; 10
 3f4:	91 05       	cpc	r25, r1
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <__vector_1+0x5c>
 3f8:	55 c0       	rjmp	.+170    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 3fa:	fc 01       	movw	r30, r24
 3fc:	e2 5c       	subi	r30, 0xC2	; 194
 3fe:	ff 4f       	sbci	r31, 0xFF	; 255
 400:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__tablejump2__>
	{
		
		case 0:
		{
			PORTD |= (SET(3) | SET(4) | SET(5) | SET(6) | SET(7));
 404:	8b b1       	in	r24, 0x0b	; 11
 406:	88 6f       	ori	r24, 0xF8	; 248
 408:	8b b9       	out	0x0b, r24	; 11
			PORTB |= SET(5);
 40a:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= 0xFE;	//reset bit 0 from PORTB
 40c:	28 98       	cbi	0x05, 0	; 5
		}break;
 40e:	4a c0       	rjmp	.+148    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 1:
		{
			PORTD |= (SET(3) | SET(4));
 410:	8b b1       	in	r24, 0x0b	; 11
 412:	88 61       	ori	r24, 0x18	; 24
 414:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x1F;	//clear f,e,d led
 416:	8b b1       	in	r24, 0x0b	; 11
 418:	8f 71       	andi	r24, 0x1F	; 31
 41a:	8b b9       	out	0x0b, r24	; 11
			PORTB &= 0xDE;	//reset bit 0 and 5 from PORTB
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	8e 7d       	andi	r24, 0xDE	; 222
 420:	85 b9       	out	0x05, r24	; 5
		}break;
 422:	40 c0       	rjmp	.+128    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 2:
		{
			PORTD = ( SET(3) | SET(5) | SET(6));
 424:	88 e6       	ldi	r24, 0x68	; 104
 426:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x6F;	//clear f,c led
 428:	8b b1       	in	r24, 0x0b	; 11
 42a:	8f 76       	andi	r24, 0x6F	; 111
 42c:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (SET(5) | SET(0));	//set bit 0 and 5 from PORTB
 42e:	85 b1       	in	r24, 0x05	; 5
 430:	81 62       	ori	r24, 0x21	; 33
 432:	85 b9       	out	0x05, r24	; 5
		}break;
 434:	37 c0       	rjmp	.+110    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 3:
		{
			PORTD = ( SET(3) | SET(4) | SET(5));
 436:	88 e3       	ldi	r24, 0x38	; 56
 438:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x3F;	//clear f,e
 43a:	8b b1       	in	r24, 0x0b	; 11
 43c:	8f 73       	andi	r24, 0x3F	; 63
 43e:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (SET(0) | SET(5));
 440:	85 b1       	in	r24, 0x05	; 5
 442:	81 62       	ori	r24, 0x21	; 33
 444:	85 b9       	out	0x05, r24	; 5
		}break;
 446:	2e c0       	rjmp	.+92     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 4:
		{
			PORTD = ( SET(3) | SET(4) | SET(7));
 448:	88 e9       	ldi	r24, 0x98	; 152
 44a:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x9F;	//clear e,d
 44c:	8b b1       	in	r24, 0x0b	; 11
 44e:	8f 79       	andi	r24, 0x9F	; 159
 450:	8b b9       	out	0x0b, r24	; 11
			PORTB |= 0x01;
 452:	28 9a       	sbi	0x05, 0	; 5
			PORTB &= 0xDF;	//clear a
 454:	2d 98       	cbi	0x05, 5	; 5
		}break;
 456:	26 c0       	rjmp	.+76     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 5:
		{
			PORTD = ( SET(4) | SET(5) | SET(7));
 458:	80 eb       	ldi	r24, 0xB0	; 176
 45a:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0xB7;	//clear b,e
 45c:	8b b1       	in	r24, 0x0b	; 11
 45e:	87 7b       	andi	r24, 0xB7	; 183
 460:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (SET(1) | SET(5));
 462:	85 b1       	in	r24, 0x05	; 5
 464:	82 62       	ori	r24, 0x22	; 34
 466:	85 b9       	out	0x05, r24	; 5
		}break;
 468:	1d c0       	rjmp	.+58     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 6:
		{
			PORTD = ( SET(4) | SET(5) | SET(6) | SET(7));
 46a:	80 ef       	ldi	r24, 0xF0	; 240
 46c:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0xF7;	//clear b
 46e:	5b 98       	cbi	0x0b, 3	; 11
			PORTB |= (SET(0) | SET(5));
 470:	85 b1       	in	r24, 0x05	; 5
 472:	81 62       	ori	r24, 0x21	; 33
 474:	85 b9       	out	0x05, r24	; 5
		}break;
 476:	16 c0       	rjmp	.+44     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 7:
		{
			PORTD |= ( SET(3) | SET(4));
 478:	8b b1       	in	r24, 0x0b	; 11
 47a:	88 61       	ori	r24, 0x18	; 24
 47c:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0x1F;		//Clear d,e,f
 47e:	8b b1       	in	r24, 0x0b	; 11
 480:	8f 71       	andi	r24, 0x1F	; 31
 482:	8b b9       	out	0x0b, r24	; 11
			PORTB |= SET(5);	//Set a
 484:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= 0xFE;		//Clear a
 486:	28 98       	cbi	0x05, 0	; 5
		}break;
 488:	0d c0       	rjmp	.+26     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 8:
		{
			PORTD = ( SET(4) | SET(5) | SET(6) | SET(7) | SET(3));
 48a:	88 ef       	ldi	r24, 0xF8	; 248
 48c:	8b b9       	out	0x0b, r24	; 11
			PORTB |= (SET(0) | SET(5));
 48e:	85 b1       	in	r24, 0x05	; 5
 490:	81 62       	ori	r24, 0x21	; 33
 492:	85 b9       	out	0x05, r24	; 5
		}break;
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		
		case 9:
		{
			PORTD |= ( SET(3) | SET(4) | SET(5) | SET(7) ) ;
 496:	8b b1       	in	r24, 0x0b	; 11
 498:	88 6b       	ori	r24, 0xB8	; 184
 49a:	8b b9       	out	0x0b, r24	; 11
			PORTD &= 0xBF;		//clear e
 49c:	5e 98       	cbi	0x0b, 6	; 11
			PORTB |= (SET(5) | SET(0));
 49e:	85 b1       	in	r24, 0x05	; 5
 4a0:	81 62       	ori	r24, 0x21	; 33
 4a2:	85 b9       	out	0x05, r24	; 5
		}break;
	}
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <__vector_7>:


//ISR led Blink 1 sec - Timer 2
//Increment 7 segments display
ISR(TIMER2_COMPA_vect)
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	timer_blick_ct++;
 4e8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer_blick_ct>
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <timer_blick_ct>
	
	if(timer_blick_ct == 61)
 4f2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer_blick_ct>
 4f6:	8d 33       	cpi	r24, 0x3D	; 61
 4f8:	69 f4       	brne	.+26     	; 0x514 <__vector_7+0x4e>
	{
		timer_blick_ct = 0;				//reset the counter
 4fa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <timer_blick_ct>
		PORTB ^= SET(2);				//toggle
 4fe:	95 b1       	in	r25, 0x05	; 5
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	89 27       	eor	r24, r25
 504:	85 b9       	out	0x05, r24	; 5
		
		ct_button++;	//increment the button counter (for 3 seconds)
 506:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <ct_button>
 50a:	8f 5f       	subi	r24, 0xFF	; 255
 50c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ct_button>
		
		//reset the counter if button is pressed more than 3 seconds
		Reset_ButtonCounter_3sec();
 510:	0e 94 8d 01 	call	0x31a	; 0x31a <Reset_ButtonCounter_3sec>

		//ShowAndIncrement_7SegmentDisplay();
	}
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <__vector_16>:


//ISR led dimming effect
ISR(TIMER0_OVF_vect)
{
 536:	1f 92       	push	r1
 538:	0f 92       	push	r0
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	0f 92       	push	r0
 53e:	11 24       	eor	r1, r1
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
	St_Ct++;
 548:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <St_Ct>
 54c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <St_Ct+0x1>
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <St_Ct+0x1>
 556:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <St_Ct>
	
	switch(E_LedState)
 55a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <E_LedState>
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	89 f0       	breq	.+34     	; 0x584 <__vector_16+0x4e>
 562:	18 f4       	brcc	.+6      	; 0x56a <__vector_16+0x34>
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	31 f0       	breq	.+12     	; 0x574 <__vector_16+0x3e>
 568:	20 c0       	rjmp	.+64     	; 0x5aa <__vector_16+0x74>
 56a:	83 30       	cpi	r24, 0x03	; 3
 56c:	91 f0       	breq	.+36     	; 0x592 <__vector_16+0x5c>
 56e:	84 30       	cpi	r24, 0x04	; 4
 570:	c1 f0       	breq	.+48     	; 0x5a2 <__vector_16+0x6c>
 572:	1b c0       	rjmp	.+54     	; 0x5aa <__vector_16+0x74>
	{
		case E_LED_STATE_FADE_IN:
		{
			// Set pwm value in OCR1A
			OCR1A = 255/60 + OCR1A;
 574:	e8 e8       	ldi	r30, 0x88	; 136
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	91 81       	ldd	r25, Z+1	; 0x01
 57c:	04 96       	adiw	r24, 0x04	; 4
 57e:	91 83       	std	Z+1, r25	; 0x01
 580:	80 83       	st	Z, r24
		}break;
 582:	13 c0       	rjmp	.+38     	; 0x5aa <__vector_16+0x74>
		
		case E_LED_STATE_STAY_HIGH:
		{
			OCR1A = 255;
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 58c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		}break;
 590:	0c c0       	rjmp	.+24     	; 0x5aa <__vector_16+0x74>
		
		case E_LED_STATE_FADE_OUT:
		{
			OCR1A = OCR1A - 255/60;
 592:	e8 e8       	ldi	r30, 0x88	; 136
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	91 81       	ldd	r25, Z+1	; 0x01
 59a:	04 97       	sbiw	r24, 0x04	; 4
 59c:	91 83       	std	Z+1, r25	; 0x01
 59e:	80 83       	st	Z, r24
		}break;
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__vector_16+0x74>
		
		case E_LED_STATE_STAY_LOW:
		{
			OCR1A = 0;
 5a2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5a6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		}break;
		
	}
	
	switch(St_Ct)
 5aa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <St_Ct>
 5ae:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <St_Ct+0x1>
 5b2:	88 37       	cpi	r24, 0x78	; 120
 5b4:	91 05       	cpc	r25, r1
 5b6:	79 f0       	breq	.+30     	; 0x5d6 <__vector_16+0xa0>
 5b8:	1c f4       	brge	.+6      	; 0x5c0 <__vector_16+0x8a>
 5ba:	cc 97       	sbiw	r24, 0x3c	; 60
 5bc:	41 f0       	breq	.+16     	; 0x5ce <__vector_16+0x98>
 5be:	1d c0       	rjmp	.+58     	; 0x5fa <__vector_16+0xc4>
 5c0:	84 3b       	cpi	r24, 0xB4	; 180
 5c2:	91 05       	cpc	r25, r1
 5c4:	61 f0       	breq	.+24     	; 0x5de <__vector_16+0xa8>
 5c6:	80 3f       	cpi	r24, 0xF0	; 240
 5c8:	91 05       	cpc	r25, r1
 5ca:	69 f0       	breq	.+26     	; 0x5e6 <__vector_16+0xb0>
 5cc:	16 c0       	rjmp	.+44     	; 0x5fa <__vector_16+0xc4>
	{
		case 60:
		{
			E_LedState = E_LED_STATE_FADE_IN;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <E_LedState>
		}break;
 5d4:	12 c0       	rjmp	.+36     	; 0x5fa <__vector_16+0xc4>
		
		case 120:
		{
			E_LedState = E_LED_STATE_STAY_HIGH;
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <E_LedState>
		}break;
 5dc:	0e c0       	rjmp	.+28     	; 0x5fa <__vector_16+0xc4>
		
		case 180:
		{
			E_LedState = E_LED_STATE_FADE_OUT;
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <E_LedState>
		}break;
 5e4:	0a c0       	rjmp	.+20     	; 0x5fa <__vector_16+0xc4>
		
		case 240:
		{
			//Reset
			St_Ct = 0;
 5e6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <St_Ct+0x1>
 5ea:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <St_Ct>
			OCR1A = 0;
 5ee:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5f2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			E_LedState = 0;
 5f6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <E_LedState>
		}break;
	}
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	9f 91       	pop	r25
 600:	8f 91       	pop	r24
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <Serial_transmission_init>:
	
	for(i = 0; i < strlen(ub_Send); i++)
	{
		Serial_transmission_USART_Transmit(ub_Send[i]);
	}
}
 60c:	23 9a       	sbi	0x04, 3	; 4
 60e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 612:	87 e6       	ldi	r24, 0x67	; 103
 614:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 618:	e2 ec       	ldi	r30, 0xC2	; 194
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	86 60       	ori	r24, 0x06	; 6
 620:	80 83       	st	Z, r24
 622:	e1 ec       	ldi	r30, 0xC1	; 193
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	88 69       	ori	r24, 0x98	; 152
 62a:	80 83       	st	Z, r24
 62c:	08 95       	ret

0000062e <Serial_transmission_UsartWrite>:
**
**
**F*****************************************************************************************/

_EXT void Serial_transmission_UsartWrite(char *data, unsigned char length)
{
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	dc 01       	movw	r26, r24
 634:	9c 01       	movw	r18, r24
 636:	26 0f       	add	r18, r22
 638:	31 1d       	adc	r19, r1
	unsigned char i = 0;
	while (length > 0)
	{
		// Wait for buffers to be free
		if (UCSR0A & SET(UDRE0))
 63a:	e0 ec       	ldi	r30, 0xC0	; 192
 63c:	f0 e0       	ldi	r31, 0x00	; 0
		
		{
			UDR0 = data[i++];
 63e:	c6 ec       	ldi	r28, 0xC6	; 198
 640:	d0 e0       	ldi	r29, 0x00	; 0
**F*****************************************************************************************/

_EXT void Serial_transmission_UsartWrite(char *data, unsigned char length)
{
	unsigned char i = 0;
	while (length > 0)
 642:	05 c0       	rjmp	.+10     	; 0x64e <Serial_transmission_UsartWrite+0x20>
	{
		// Wait for buffers to be free
		if (UCSR0A & SET(UDRE0))
 644:	90 81       	ld	r25, Z
 646:	95 ff       	sbrs	r25, 5
 648:	fd cf       	rjmp	.-6      	; 0x644 <Serial_transmission_UsartWrite+0x16>
		
		{
			UDR0 = data[i++];
 64a:	8d 91       	ld	r24, X+
 64c:	88 83       	st	Y, r24
**F*****************************************************************************************/

_EXT void Serial_transmission_UsartWrite(char *data, unsigned char length)
{
	unsigned char i = 0;
	while (length > 0)
 64e:	a2 17       	cp	r26, r18
 650:	b3 07       	cpc	r27, r19
 652:	21 f0       	breq	.+8      	; 0x65c <Serial_transmission_UsartWrite+0x2e>
	{
		// Wait for buffers to be free
		if (UCSR0A & SET(UDRE0))
 654:	80 81       	ld	r24, Z
 656:	85 fd       	sbrc	r24, 5
 658:	f8 cf       	rjmp	.-16     	; 0x64a <Serial_transmission_UsartWrite+0x1c>
 65a:	f4 cf       	rjmp	.-24     	; 0x644 <Serial_transmission_UsartWrite+0x16>
		}

	}
	
	// Wait for transmission to be ready
	while (!(UCSR0A & (1<<TXC0)));
 65c:	e0 ec       	ldi	r30, 0xC0	; 192
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	86 ff       	sbrs	r24, 6
 664:	fd cf       	rjmp	.-6      	; 0x660 <Serial_transmission_UsartWrite+0x32>
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <Timer0_fPWM_dimming_timer>:
**F*****************************************************************************************/

_LOC void Timer0_fPWM_dimming_timer (void)
{
	//Set-up the prescaler - 1024
	TCCR0B = (SET(CS00) | SET(CS02));
 66c:	85 e0       	ldi	r24, 0x05	; 5
 66e:	85 bd       	out	0x25, r24	; 37
	
	// timer interrupt enabled
	TIMSK0 |= SET(TOIE0);
 670:	ee e6       	ldi	r30, 0x6E	; 110
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	81 60       	ori	r24, 0x01	; 1
 678:	80 83       	st	Z, r24
	
	//TOV0 set timer overflow
	TIFR0 |= SET(TOV0);
 67a:	a8 9a       	sbi	0x15, 0	; 21
	
	//Timer init
	TCNT0 = 0;
 67c:	16 bc       	out	0x26, r1	; 38
 67e:	08 95       	ret

00000680 <Timer0_fPWM_dimming_pwm>:
**
**F*****************************************************************************************/

_LOC void Timer0_fPWM_dimming_pwm (void)
{
	TCCR1A = SET(WGM10) | SET(COM1A1);
 680:	81 e8       	ldi	r24, 0x81	; 129
 682:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = SET(CS10) | SET(WGM12);   //Config Pwm
 686:	89 e0       	ldi	r24, 0x09	; 9
 688:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	//Init bit 1 from port B as output
	DDRB |= SET(1);
 68c:	21 9a       	sbi	0x04, 1	; 4
	
	sei(); //enable global interrupts
 68e:	78 94       	sei
 690:	08 95       	ret

00000692 <Timer0_fPWM_dimming_init>:
**
**
**F*****************************************************************************************/
_EXT void Timer0_fPWM_dimming_init(void)
{
	Timer0_fPWM_dimming_timer();
 692:	0e 94 36 03 	call	0x66c	; 0x66c <Timer0_fPWM_dimming_timer>
	Timer0_fPWM_dimming_pwm();
 696:	0e 94 40 03 	call	0x680	; 0x680 <Timer0_fPWM_dimming_pwm>
 69a:	08 95       	ret

0000069c <Timer2_Blink_1s_Timer_init>:

_EXT void Timer2_Blink_1s_Timer_init(void)
{
	//16 000 000 / 1024 = 15625
	//15625 / 255 = 61 => we need 61 compare interrupts for 1 second
	OCR2A = 255;		
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	DDRB |= SET(2);		//set the BIT 2 from PORTB as output
 6a2:	22 9a       	sbi	0x04, 2	; 4

	TCCR2A |= SET(WGM21);
 6a4:	e0 eb       	ldi	r30, 0xB0	; 176
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	80 83       	st	Z, r24
	// Set to CTC Mode

	TIMSK2 |= SET(OCIE2A);
 6ae:	e0 e7       	ldi	r30, 0x70	; 112
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	82 60       	ori	r24, 0x02	; 2
 6b6:	80 83       	st	Z, r24
	//Set interrupt on compare match

	TCCR2B |= (SET(CS21) | SET(CS20) | SET(CS22));
 6b8:	e1 eb       	ldi	r30, 0xB1	; 177
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	87 60       	ori	r24, 0x07	; 7
 6c0:	80 83       	st	Z, r24
	// set prescaler to 1024

	sei();
 6c2:	78 94       	sei
 6c4:	08 95       	ret

000006c6 <__tablejump2__>:
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	05 90       	lpm	r0, Z+
 6cc:	f4 91       	lpm	r31, Z
 6ce:	e0 2d       	mov	r30, r0
 6d0:	09 94       	ijmp

000006d2 <__itoa_ncheck>:
 6d2:	bb 27       	eor	r27, r27
 6d4:	4a 30       	cpi	r20, 0x0A	; 10
 6d6:	31 f4       	brne	.+12     	; 0x6e4 <__itoa_ncheck+0x12>
 6d8:	99 23       	and	r25, r25
 6da:	22 f4       	brpl	.+8      	; 0x6e4 <__itoa_ncheck+0x12>
 6dc:	bd e2       	ldi	r27, 0x2D	; 45
 6de:	90 95       	com	r25
 6e0:	81 95       	neg	r24
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__utoa_common>

000006e8 <__utoa_ncheck>:
 6e8:	bb 27       	eor	r27, r27

000006ea <__utoa_common>:
 6ea:	fb 01       	movw	r30, r22
 6ec:	55 27       	eor	r21, r21
 6ee:	aa 27       	eor	r26, r26
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	aa 1f       	adc	r26, r26
 6f6:	a4 17       	cp	r26, r20
 6f8:	10 f0       	brcs	.+4      	; 0x6fe <__utoa_common+0x14>
 6fa:	a4 1b       	sub	r26, r20
 6fc:	83 95       	inc	r24
 6fe:	50 51       	subi	r21, 0x10	; 16
 700:	b9 f7       	brne	.-18     	; 0x6f0 <__utoa_common+0x6>
 702:	a0 5d       	subi	r26, 0xD0	; 208
 704:	aa 33       	cpi	r26, 0x3A	; 58
 706:	08 f0       	brcs	.+2      	; 0x70a <__utoa_common+0x20>
 708:	a9 5d       	subi	r26, 0xD9	; 217
 70a:	a1 93       	st	Z+, r26
 70c:	00 97       	sbiw	r24, 0x00	; 0
 70e:	79 f7       	brne	.-34     	; 0x6ee <__utoa_common+0x4>
 710:	b1 11       	cpse	r27, r1
 712:	b1 93       	st	Z+, r27
 714:	11 92       	st	Z+, r1
 716:	cb 01       	movw	r24, r22
 718:	0c 94 8e 03 	jmp	0x71c	; 0x71c <strrev>

0000071c <strrev>:
 71c:	dc 01       	movw	r26, r24
 71e:	fc 01       	movw	r30, r24
 720:	67 2f       	mov	r22, r23
 722:	71 91       	ld	r23, Z+
 724:	77 23       	and	r23, r23
 726:	e1 f7       	brne	.-8      	; 0x720 <strrev+0x4>
 728:	32 97       	sbiw	r30, 0x02	; 2
 72a:	04 c0       	rjmp	.+8      	; 0x734 <strrev+0x18>
 72c:	7c 91       	ld	r23, X
 72e:	6d 93       	st	X+, r22
 730:	70 83       	st	Z, r23
 732:	62 91       	ld	r22, -Z
 734:	ae 17       	cp	r26, r30
 736:	bf 07       	cpc	r27, r31
 738:	c8 f3       	brcs	.-14     	; 0x72c <strrev+0x10>
 73a:	08 95       	ret

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
